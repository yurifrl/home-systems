---
- name: Join K3s Worker Nodes
  hosts: workers
  become: true
  vars:
    master_ip: "{{ hostvars[groups['master'][0]]['ansible_host'] }}"
    master_user: "{{ hostvars[groups['master'][0]]['ansible_user'] }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    k3s_arch: "arm64"
  
  tasks:
    - name: Get K3s version from master
      ansible.builtin.command: ssh {{ master_user }}@{{ master_ip }} "k3s -v"
      register: k3s_version_output
      delegate_to: localhost
      become: false
      run_once: true
      changed_when: false

    - name: Extract K3s version
      ansible.builtin.set_fact:
        k3s_version: "{{ k3s_version_output.stdout | regex_search('v[0-9]+\\.[0-9]+\\.[0-9]+\\+k3s[0-9]+') }}"
      run_once: true

    - name: Debug K3s version
      ansible.builtin.debug:
        msg: "Using K3s version: {{ k3s_version }}"
      run_once: true

    - name: Install required packages
      ansible.builtin.package:
        name: 
          - curl
          - tar
        state: present

    - name: Download K3s binary
      ansible.builtin.get_url:
        url: "https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/k3s-{{ k3s_arch }}"
        dest: /usr/local/bin/k3s.new
        mode: '0755'
        force: yes

    - name: Configure K3s agent
      ansible.builtin.template:
        src: k3s-agent.service.j2
        dest: /etc/systemd/system/k3s-agent.service
        mode: '0644'
      notify: Restart K3s agent

    - name: Create K3s service directory
      ansible.builtin.file:
        path: /k3s
        state: directory
        mode: '0755'

    - name: Create K3s config
      ansible.builtin.template:
        src: config.yaml.j2
        dest: /k3s/config.yaml
        mode: '0644'
      notify: Restart K3s agent

    - name: Enable K3s agent service
      ansible.builtin.systemd:
        name: k3s-agent
        enabled: true
        daemon_reload: true

    - name: Check if K3s is running
      ansible.builtin.systemd:
        name: k3s-agent
        state: started

    - name: Replace K3s binary if service is running
      ansible.builtin.command: mv /usr/local/bin/k3s.new /usr/local/bin/k3s
      notify: Restart K3s agent
      when: ansible_facts.services['k3s-agent.service'] is defined and ansible_facts.services['k3s-agent.service'].state == 'running'

    - name: Install K3s binary if service is not running
      ansible.builtin.command: mv /usr/local/bin/k3s.new /usr/local/bin/k3s
      when: ansible_facts.services['k3s-agent.service'] is not defined or ansible_facts.services['k3s-agent.service'].state != 'running'

    - name: Start K3s agent service if not running
      ansible.builtin.systemd:
        name: k3s-agent
        state: started
      when: ansible_facts.services['k3s-agent.service'] is not defined or ansible_facts.services['k3s-agent.service'].state != 'running'

    - name: Verify environment variables
      ansible.builtin.command: systemctl show k3s-agent -p Environment
      register: env_check
      changed_when: false

    - name: Debug environment variables
      ansible.builtin.debug:
        var: env_check.stdout

  handlers:
    - name: Restart K3s agent
      ansible.builtin.systemd:
        name: k3s-agent
        state: restarted
        daemon_reload: true