apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vector
  namespace: argocd
  finalizers:
  - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  destination:
    server: https://kubernetes.default.svc
    namespace: vector
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  sources:
    # Vector Helm chart installation
    - repoURL: https://helm.vector.dev
      chart: vector
      targetRevision: "*"
      helm:
        valuesObject:
          # Set Vector role as Aggregator to collect logs from the cluster
          role: "Aggregator"
          
          # API configuration for monitoring and management
          api:
            enabled: true
            address: 0.0.0.0:8686
          
          # Configure resources for Vector
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          
          # Service monitor for Prometheus integration
          podMonitor:
            enabled: true
            
          # Vector configuration with sources, transforms, and sinks
          customConfig:
            data_dir: /vector-data-dir
            
            # API configuration
            api:
              enabled: true
              address: 0.0.0.0:8686
              
            # Sources - collect logs from Kubernetes
            sources:
              kubernetes_logs:
                type: kubernetes_logs
                pod_annotation_fields:
                  container_image: container_image
                pod_label_fields:
                  app: app
                  
              # Internal Vector metrics for self-monitoring
              internal_metrics:
                type: internal_metrics
              
              # Host metrics for system monitoring
              host_metrics:
                type: host_metrics
                collectors:
                  - cpu
                  - disk
                  - memory
                  - network
            
            # Transforms - process and prepare logs and metrics
            transforms:
              # Parse and structure Kubernetes logs
              remap_kubernetes:
                type: remap
                inputs: ["kubernetes_logs"]
                source: |
                  # Add structured metadata from Kubernetes
                  .namespace = .kubernetes.pod_namespace
                  .pod = .kubernetes.pod_name
                  .container = .kubernetes.container_name
                  # Structure the log message if it's in JSON format
                  if is_string(.message) && starts_with(.message, "{") {
                    parsed = parse_json!(.message) ?? .message
                    if is_object(parsed) {
                      .parsed = parsed
                    }
                  }
              
              # Convert some logs to metrics
              logs_to_metrics:
                type: log_to_metric
                inputs: ["remap_kubernetes"]
                metrics:
                  - type: counter
                    name: log_lines_total
                    field: message
                    tags:
                      namespace: "${namespace}"
                      pod: "${pod}"
                      container: "${container}"
                      app: "${kubernetes.pod_labels.app}"
                      
            # Sinks - where to send the processed data
            sinks:
              # Send logs to Loki
              loki:
                type: loki
                inputs: ["remap_kubernetes"]
                endpoint: http://loki-single-binary.monitoring.svc.cluster.local:3100
                encoding:
                  codec: json
                labels:
                  namespace: "{{ namespace }}"
                  pod: "{{ pod }}"
                  container: "{{ container }}"
                  app: "{{ kubernetes.pod_labels.app }}"
                batch:
                  max_bytes: 2049000
                
              # Send metrics to Prometheus
              prometheus:
                type: prometheus_exporter
                inputs: ["internal_metrics", "host_metrics", "logs_to_metrics"]
                address: 0.0.0.0:9598
                
              # Console output for debugging
              console:
                type: console
                inputs: ["remap_kubernetes"]
                encoding:
                  codec: json
          
          # Configure service to expose the Prometheus metrics
          service:
            enabled: true
            ports:
              - name: prom-exporter
                port: 9598
                targetPort: 9598
                protocol: TCP
    # Add virtual service configuration
    - repoURL: https://github.com/yurifrl/home-systems.git
      targetRevision: HEAD
      path: k8s/charts/support
      helm:
        valuesObject:
          virtualServices:
            - name: vector
              service:
                name: vector
                namespace: vector
                port: 8686
