apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{ .Release.Name }}-mqtt-monitor
  namespace: {{ .Release.Namespace }}
spec:
  entrypoint: monitor-distance
  templates:
    - name: monitor-distance
      container:
        image: python:3.11-slim
        command: ["/bin/bash", "-c"]
        args:
          - |
            # Install required packages
            pip install paho-mqtt

            # Create the monitoring script
            cat > mqtt_watch.py << 'EOF'
            import paho.mqtt.client as mqtt
            import json
            import os

            def on_connect(client, userdata, flags, rc, properties=None):
                if rc == 0:
                    client.subscribe("zigbee2mqtt/0xa4c138616b4937b2")

            def on_message(client, userdata, msg):
                try:
                    data = json.loads(msg.payload.decode())
                    if "target_distance" in data:
                        print(f"Distance: {data['target_distance']}")
                except:
                    pass

            client = mqtt.Client(protocol=mqtt.MQTTv5)
            client.on_connect = on_connect
            client.on_message = on_message

            client.connect(os.getenv("MQTT_HOST"), int(os.getenv("MQTT_PORT")), 60)
            client.loop_forever()
            EOF

            # Run the script
            python mqtt_watch.py
        env:
          - name: MQTT_HOST
            value: "mosquitto.mosquitto.svc"
          - name: MQTT_PORT
            value: "1883"

---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: {{ .Release.Name }}-mqtt-monitor
  namespace: {{ .Release.Namespace }}
spec:
  workflowTemplateRef:
    name: {{ .Release.Name }}-mqtt-monitor

---
apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: {{ .Release.Name }}-mqtt-monitor-cron
  namespace: {{ .Release.Namespace }}
spec:
  schedule: "*/5 * * * *"
  concurrencyPolicy: Replace
  workflowSpec:
    workflowTemplateRef:
      name: {{ .Release.Name }}-mqtt-monitor 