{{- if .Values.stockChecker.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{ .Release.Name }}-stock-checker
  namespace: {{ .Release.Namespace }}
spec:
  entrypoint: check-stock
  arguments:
    parameters:
      - name: products
        value: |
          {{- .Values.stockChecker.products | toJson | nindent 10 }}
  templates:
    - name: check-stock
      inputs:
        parameters:
          - name: products
      container:
        image: nixery.dev/arm64/shell/curl/jq/bash/grep
        command: ["/bin/bash", "-c"]
        args:
          - |
            #!/bin/bash
            set -e

            USER_AGENT="Mozilla/5.0"

            # ANSI color codes
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            BLUE='\033[0;34m'
            GRAY='\033[0;90m'
            NC='\033[0m' # No Color
            BOLD='\033[1m'

            # Logging functions
            log_info() {
              echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] ℹ️  INFO${NC}    $1"
            }

            log_success() {
              echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ✅ SUCCESS${NC}  $1"
            }

            log_error() {
              echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ❌ ERROR${NC}   $1"
            }

            log_warn() {
              echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ⚠️  WARN${NC}    $1"
            }

            # Function to send Discord notification
            notify_discord() {
              local message="$1"
              log_info "Sending Discord notification..."
              if curl -sS -X POST \
                -H "Content-Type: application/json" \
                -d "{\"content\":\"$message\"}" \
                "$DISCORD_WEBHOOK"; then
                log_success "Discord notification sent"
              else
                log_error "Failed to send Discord notification"
              fi
            }

            # Function to check product stock
            check_product() {
              local name="$1"
              local url="$2"
              local out_of_stock_text="$3"

              echo -e "\n${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
              log_info "Checking stock for ${BOLD}$name${NC}"
              log_info "URL: ${GRAY}$url${NC}"

              local response
              if response=$(curl -sS -A "$USER_AGENT" "$url"); then
                if echo "$response" | grep -q 'button.*variant="unavailable".*Esgotado.*disabled'; then
                  log_warn "Product ${BOLD}$name${NC} is out of stock 😢"
                else
                  log_success "Product ${BOLD}$name${NC} is in stock! 🎉"
                  notify_discord "🚨 $name is in stock! Check $url"
                fi
              else
                log_error "Failed to fetch product page for ${BOLD}$name${NC}"
              fi
            }

            log_info "Starting stock checker..."
            echo -e "${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"

            # Parse products JSON and check each one
            echo '{{`{{inputs.parameters.products}}`}}' | jq -c '.[]' | while read -r product; do
              if [ -n "$product" ]; then
                name=$(echo "$product" | jq -r '.name // empty')
                url=$(echo "$product" | jq -r '.url // empty')
                out_of_stock_text=$(echo "$product" | jq -r '.outOfStockText // empty')
                
                if [ -n "$name" ] && [ -n "$url" ] && [ -n "$out_of_stock_text" ]; then
                  check_product "$name" "$url" "$out_of_stock_text"
                fi
              fi
            done

            echo -e "\n${BOLD}${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            log_success "Stock check completed"
        env:
          - name: DISCORD_WEBHOOK
            valueFrom:
              secretKeyRef:
                name: argo-workflows-stock-checker
                key: DISCORD_WEBHOOK_URL

---
apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: {{ .Release.Name }}-stock-checker-cron
  namespace: {{ .Release.Namespace }}
spec:
  schedule: {{ .Values.stockChecker.schedule | default "*/15 * * * *" | quote }}
  concurrencyPolicy: Replace
  workflowSpec:
    workflowTemplateRef:
      name: {{ .Release.Name }}-stock-checker
    arguments:
      parameters:
        - name: products
          value: |
            {{- .Values.stockChecker.products | toJson | nindent 12 }}
{{- end }} 